//
// Graphics.cpp for Graphics in /home/mendez_t/local/cpp/cpp_bomberman/AllTest/testGdl+OCCULUS
//
// Made by thomas mendez
// Login   <mendez_t@epitech.net>
//
// Started on  Tue May 13 15:12:04 2014 thomas mendez
// Last update Wed May 21 03:01:21 2014 Remi telenczak
//


#include	"OVR.h"
#include	<iostream>
#include	<string>
#include	<unistd.h>
#include	<SdlContext.hh>
#include	"AObjectPhysic.hpp"
#include	<cstdlib>
#include	<Game.hh>
#include	<Clock.hh>
#include	<Input.hh>
#include	<SdlContext.hh>
#include	<Geometry.hh>
#include	<Texture.hh>
#include	<BasicShader.hh>
#include	<Model.hh>
#include	<OpenGL.hh>
#include	<glm/glm.hpp>
#include	<glm/gtc/matrix_transform.hpp>
#include	"Graphics.hpp"
#include "GL/glut.h"
#include "Player.hpp"

Graphics::Graphics(EventManager *event) : _event(event)
{
}

Graphics::~Graphics()
{

}

void		Graphics::setModelList(ModelList *mod)
{
  this->_modelList = mod;
}

bool		Graphics::initialize()
{
  glm::mat4 projection;
  glm::mat4 transformation;

  if (!_context.start(1280, 800, "My bomberman!"))
    return false;
  glMatrixMode(GL_PROJECTION);
  glEnable(GL_DEPTH_TEST);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
  if (!_shader.load("./shaders/basic.fp", GL_FRAGMENT_SHADER)
      || !_shader.load("./shaders/basic.vp", GL_VERTEX_SHADER)
      || !_shader.build())
    return false;
  _shader.bind();
  this->_camera = new CameraBomber(&_shader, _event);
  return true;
}
bool		Graphics::update(Map *map)
{
  if (_input.getKey(SDLK_ESCAPE) || _input.getInput(SDL_QUIT))
    return false;
  _context.updateClock(_clock);
  _context.updateInputs(_input);
  map->update(_clock, _input);
  this->inputUpdate();
  return true;
}

void		Graphics::inputUpdate()
{
//
// Player.cpp for Player.cpp in /home/dedick_r/Tek2/c++/cpp_bomberman/src
//
// Made by dedicker remi
// Login   <dedick_r@epitech.net>
//
// Started on  Tue May 13 17:27:38 2014 dedicker remi
// Last update Wed May 21 04:01:23 2014 Remi telenczak
//

#include "Player.hpp"
#include	"EventManager.hpp"
#include	"DefaultBomb.hpp"

Player::Player(int x, int y, int z, Map *map, ModelList *model, EventManager *event) : APlayer(x, y, z, map, model, event)
{
  std::cout << "Player Created" << std::endl;
  this->rotate(glm::vec3(0, 1, 0), 180);
  if (event == NULL)
    {
      std::cout << "Event null" << std::endl;
      exit(0);
    }
  //callPosPlayer = new CallBack<Player>(this, &Player::eventPosPlayer);
  //_event->listenEvent("posPlayer", callPosPlayer);
  callKeyUp = new CallBack<Player>(this, &Player::eventKeyUp);
  event->listenEvent("keyUp", callKeyUp);
  callKeyLeft = new CallBack<Player>(this, &Player::eventKeyLeft);
  event->listenEvent("keyLeft", callKeyLeft);
  callKeyRight = new CallBack<Player>(this, &Player::eventKeyRight);
  event->listenEvent("keyRight", callKeyRight);
  callKeyDown = new CallBack<Player>(this, &Player::eventKeyDown);
  event->listenEvent("keyDown", callKeyDown);
  callRotateLeft = new CallBack<Player>(this, &Player::eventRotateLeft);
  event->listenEvent("rotateLeft", callRotateLeft);
  callRotateRight = new CallBack<Player>(this, &Player::eventRotateRight);
  event->listenEvent("rotateRight", callRotateRight);
  callKeyA = new CallBack<Player>(this, &Player::eventKeyA);
  event->listenEvent("keyA", callKeyA);
}


void	Player::eventRotateLeft(void *data)
{
  (void)data;
  // this->rotation.y -= 5;
  this->rotate(glm::vec3(0, 1, 0), -5);
  this->_event->dispatchEvent("playerRotateLeft", this);
}

void	Player::eventKeyA(void *data)
{
  (void)data;
  DefaultBomb	*bomb;

  bomb = new DefaultBomb(_map, _modelList, _event, this);
  std::cout << this->_position.x << std::endl;
  std::cout << this->_position.z << std::endl;
  bomb->set_x(((int)(this->_position.x / 3)) * 3);
  bomb->set_z(((int)(this->_position.z / 3)) * 3);
  this->_map->setMap((int)(this->_position.x/2.5), (int)(this->_position.z/2.5), bomb);
}

void	Player::eventRotateRight(void *data)
{
  (void)data;
  //this->rotation.y += 5;
  this->rotate(glm::vec3(0, 1, 0), 5);
  this->_event->dispatchEvent("playerRotateRight", this);
}

bool	Player::checkPositionCollision()
{
  std::vector<AObjectPhysic *>	objects;
  std::vector<AObjectPhysic *>::iterator	it;

  objects = this->_map->getObjectsPos(this);
  it = objects.begin();

  while (it != objects.end())
    {
      if (this->collision(*it) == true)
	{
	  //this->_position = posSauv;
	  return false;
	}
      it++;
    }
  return true;
}

void Player::move(glm::vec3 direct, std::string event)
{
  glm::vec3	posSauv;
  glm::vec3	positionTrans;

  posSauv = this->_position;
  positionTrans = this->translate(direct);
  if (checkPositionCollision() == false)
    {
      this->_position.x -= positionTrans.x;
      if (checkPositionCollision() == false)
	{
	  this->_position.x += positionTrans.x;
	  this->_position.z -= positionTrans.z;
	  if (checkPositionCollision() == false)
	    {
	      this->_position = posSauv;
	    }
	  else
	    {
	      positionTrans.z = 0;
	      this->_event->dispatchEvent(event, &positionTrans);
	    }
	}
      else
	{
	  positionTrans.x = 0;
	  this->_event->dispatchEvent(event, &positionTrans);
	}
    }
  else
    this->_event->dispatchEvent(event, &positionTrans);
}

void	Player::eventKeyUp(void *data)
{
  (void)data;
  this->move(glm::vec3(0, 0, -0.5), "playerUp");
}

void	Player::eventKeyDown(void *data)
{
    (void)data;
  this->move(glm::vec3(0, 0, 0.5), "playerDown");
  //this->translate(glm::vec3(0, 0, 0.5));
  //this->_event->dispatchEvent("playerDown", this);
}

void	Player::eventKeyRight(void *data)
{
    (void)data;
    this->move(glm::vec3(0.5, 0, 0), "playerRight");
    //this->translate(glm::vec3(0.5, 0, 0));
    //this->_event->dispatchEvent("playerRight", this);
}

void	Player::eventKeyLeft(void *data)
{
  (void)data;
    this->move(glm::vec3(-0.5, 0, 0), "playerLeft");
    //  this->translate(glm::vec3(-0.5, 0, 0));
    //this->_event->dispatchEvent("playerLeft", this);
}

void Player::update(gdl::Clock const &clock, gdl::Input &input)
{
  (void)clock;
  (void)input;

}

Player::~Player()
{
  std::cout << "Player Destroyed" << std::endl;
}
  if (_input.getKey(SDLK_UP))
    this->_event->dispatchEvent("keyUp", NULL);
  if (_input.getKey(SDLK_DOWN))
    this->_event->dispatchEvent("keyDown", NULL);
  if (_input.getKey(SDLK_LEFT))
    this->_event->dispatchEvent("keyLeft", NULL);
  if (_input.getKey(SDLK_RIGHT))
    this->_event->dispatchEvent("keyRight", NULL);
  if (_input.getKey(SDLK_q))
    this->_event->dispatchEvent("rotateLeft", NULL);
  if (_input.getKey(SDLK_d))
    this->_event->dispatchEvent("rotateRight", NULL);
  if (_input.getKey(SDLK_SPACE))
    this->_event->dispatchEvent("keyA", NULL);
  if (_input.getKey(SDLK_m))
    this->_camera->translate(0, 0.1, 0);
  if (_input.getKey(SDLK_p))
    this->_camera->translate(0, -0.1, 0);
  if (_input.getKey(SDLK_e))
    this->_camera->changeStereo(1);
  if (_input.getKey(SDLK_r))
    this->_camera->changeStereo(2);
}

void		Graphics::drawDoubleStereo(Map *map)
{
  glViewport(0, 0, 1280/2, 800);
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  glClearColor(255, 0, 0, 0);

  _shader.setUniform("view", this->_camera->getTransformationLeft());
  _shader.setUniform("projection", this->_camera->getPerspective());
  map->draw(_shader, _clock);


  glViewport(1280/2, 0,1280/2, 800);
  glClearColor(255, 0, 0, 0);

  _shader.setUniform("view", this->_camera->getTransformationRight());
  map->draw(_shader, _clock);

}

void		Graphics::drawOneStereo(Map *map)
{
  glViewport(0, 0, 1280, 800);
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  glClearColor(255, 0, 0, 0);


  map->draw(_shader, _clock);

  _shader.setUniform("projection", this->_camera->getPerspective());
  _shader.setUniform("view", this->_camera->getTransformation());
}

void		Graphics::draw(Map *map)
{
  _shader.bind();

  if (this->_camera->getStereo() == 2)
    drawDoubleStereo(map);
  else
    drawOneStereo(map);
  _context.flush();
}
